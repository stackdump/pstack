package main

import (
	"bytes"
	"fmt"
	. "github.com/stackdump/gopflow/ptnet"
	. "github.com/stackdump/gopflow/statemachine"
	"go/format"
	"io/ioutil"
	"text/template"
)

var primitiveSource = `// Code generated by go generate; DO NOT EDIT.
// This file was generated by FactomGenerate robots

package pfinance

import (
	. "github.com/stackdump/gopflow/statemachine"
)

var {{ .VarName }}Factory = {{ .VarName }}{
	Places: map[string]int{ {{ range $label, $pl := .Places }}
		{{ $label | str }}: {{ $pl.Offset }},{{ end }}
	},
	StateMachine: StateMachine{
		Initial:  StateVector{{ .Initial | StateVector }},
		Capacity: StateVector{{ .Capacity | StateVector }},
		Transitions: map[Action]Transition{ {{ range $action, $txn := .Transitions }}
			{{ $action | str }}: Transition{
				Delta:  Delta{{ $txn.Delta | Delta }},
				Role:   {{ $txn.Role | str }},
				{{ if $txn.Guards }}Guards: map[Condition]Delta{
					{{ range $condition, $check := $txn.Guards }}{{ $condition | str }}: Delta{{ $check | Delta }},{{ end }}
				},{{ else }}Guards: map[Condition]Delta{},{{ end }}
			},{{ end }}
		},
	},
}
`

func quoteStr(v interface{}) string {
	return fmt.Sprintf("\"%v\"", v)
}

var funcMap = template.FuncMap{
	"str": quoteStr,
	"StateVector": func(sv []uint64) string {
		out := "{"
		for _, v := range sv {
			out += fmt.Sprintf("%v, ", v)
		}
		out = out[:len(out)-2] + "}"
		return out
	},
	"Delta": func(dv []int64) string {
		out := "{"
		for _, v := range dv {
			out += fmt.Sprintf("%v, ", v)
		}
		out = out[:len(out)-2] + "}"
		return out
	},
}

var sourceTemplate = template.Must(
	template.New("").Funcs(funcMap).Parse(primitiveSource),
)

type sourceFile struct {
	VarName    string
	OutputPath string
	Places     map[string]Place
	*StateMachine
}

func (s sourceFile) Write() {
	b := &bytes.Buffer{}
	_ = sourceTemplate.Execute(b, s)
	fmt.Print(b.String())

	src, err := format.Source(b.Bytes())
	if err != nil {
		panic(err)
	}
	err = ioutil.WriteFile(s.OutputPath, src, 0644)
	if err != nil {
		panic(err)
	}
}

// generate templates from pflow source files
func main() {
	pshort := LoadFile("pflow/pshort.pflow")
	sourceFile{
		VarName:      "PShort",
		Places:       pshort.Places,
		StateMachine: pshort.StateMachine(),
		OutputPath:   "pfinance/pshort.pflow.go",
	}.Write()

	pconvert := LoadFile("pflow/convert.pflow")
	sourceFile{
		VarName:      "Convert",
		Places:       pconvert.Places,
		StateMachine: pconvert.StateMachine(),
		OutputPath:   "pfinance/convert.pflow.go",
	}.Write()

	faucet := LoadFile("pflow/faucet.pflow")
	sourceFile{
		VarName:      "Faucet",
		Places:       faucet.Places,
		StateMachine: faucet.StateMachine(),
		OutputPath:   "pfinance/faucet.pflow.go",
	}.Write()

	pCraft := LoadFile("pflow/pcraft.pflow")
	sourceFile{
		VarName:      "PCraft",
		Places:       pCraft.Places,
		StateMachine: pCraft.StateMachine(),
		OutputPath:   "pfinance/pcraft.pflow.go",
	}.Write()
}
